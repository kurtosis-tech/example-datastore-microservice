// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example_datastore_rpc_api_bindings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleDatastoreServiceClient is the client API for ExampleDatastoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleDatastoreServiceClient interface {
	// Returns when the gRPC server is started and running
	IsAvailable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetResponse, error)
	Upsert(ctx context.Context, in *UpsertArgs, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type exampleDatastoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleDatastoreServiceClient(cc grpc.ClientConnInterface) ExampleDatastoreServiceClient {
	return &exampleDatastoreServiceClient{cc}
}

func (c *exampleDatastoreServiceClient) IsAvailable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example_datastore_service_api.ExampleDatastoreService/IsAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleDatastoreServiceClient) Get(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/example_datastore_service_api.ExampleDatastoreService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleDatastoreServiceClient) Upsert(ctx context.Context, in *UpsertArgs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example_datastore_service_api.ExampleDatastoreService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleDatastoreServiceServer is the server API for ExampleDatastoreService service.
// All implementations must embed UnimplementedExampleDatastoreServiceServer
// for forward compatibility
type ExampleDatastoreServiceServer interface {
	// Returns when the gRPC server is started and running
	IsAvailable(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Get(context.Context, *GetArgs) (*GetResponse, error)
	Upsert(context.Context, *UpsertArgs) (*emptypb.Empty, error)
	mustEmbedUnimplementedExampleDatastoreServiceServer()
}

// UnimplementedExampleDatastoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleDatastoreServiceServer struct {
}

func (UnimplementedExampleDatastoreServiceServer) IsAvailable(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAvailable not implemented")
}
func (UnimplementedExampleDatastoreServiceServer) Get(context.Context, *GetArgs) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedExampleDatastoreServiceServer) Upsert(context.Context, *UpsertArgs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedExampleDatastoreServiceServer) mustEmbedUnimplementedExampleDatastoreServiceServer() {
}

// UnsafeExampleDatastoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleDatastoreServiceServer will
// result in compilation errors.
type UnsafeExampleDatastoreServiceServer interface {
	mustEmbedUnimplementedExampleDatastoreServiceServer()
}

func RegisterExampleDatastoreServiceServer(s grpc.ServiceRegistrar, srv ExampleDatastoreServiceServer) {
	s.RegisterService(&ExampleDatastoreService_ServiceDesc, srv)
}

func _ExampleDatastoreService_IsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleDatastoreServiceServer).IsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example_datastore_service_api.ExampleDatastoreService/IsAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleDatastoreServiceServer).IsAvailable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleDatastoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleDatastoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example_datastore_service_api.ExampleDatastoreService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleDatastoreServiceServer).Get(ctx, req.(*GetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleDatastoreService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleDatastoreServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example_datastore_service_api.ExampleDatastoreService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleDatastoreServiceServer).Upsert(ctx, req.(*UpsertArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleDatastoreService_ServiceDesc is the grpc.ServiceDesc for ExampleDatastoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleDatastoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example_datastore_service_api.ExampleDatastoreService",
	HandlerType: (*ExampleDatastoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAvailable",
			Handler:    _ExampleDatastoreService_IsAvailable_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ExampleDatastoreService_Get_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _ExampleDatastoreService_Upsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
